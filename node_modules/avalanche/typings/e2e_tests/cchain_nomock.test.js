"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const bn_js_1 = __importDefault(require("bn.js"));
describe("CChain", () => {
    const avalanche = (0, e2etestlib_1.getAvalanche)();
    const cchain = avalanche.CChain();
    const keystore = avalanche.NodeKeys();
    let exportTxHash = { value: "" };
    const user = "avalancheJsCChainUser";
    const passwd = "avalancheJsP@ssw4rd";
    const key = "PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
    const privateKeyHex = "0x56289e99c94b6912bfc12adc093c9b51124f0dc54ac7a766b2bc5ccf558d8027";
    const whaleAddr = "0x8db97C7cEcE249c2b98bDC0226Cc4C2A57BF52FC";
    const xChainAddr = "X-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u";
    // test_name        response_promise                            resp_fn          matcher           expected_value/obtained_value
    const tests_spec = [
        [
            "createUser",
            () => keystore.createUser(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => true
        ],
        [
            "importKey",
            () => cchain.importKey(user, passwd, key),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => whaleAddr
        ],
        [
            "exportAVAX",
            () => cchain.exportAVAX(user, passwd, xChainAddr, new bn_js_1.default(10)),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => exportTxHash
        ],
        [
            "getBaseFee",
            () => cchain.getBaseFee(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "0x34630b8a00"
        ],
        [
            "getMaxPriorityFeePerGas",
            () => cchain.getMaxPriorityFeePerGas(),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "0x0"
        ],
        [
            "exportKey",
            () => cchain.exportKey(user, passwd, whaleAddr),
            (x) => x,
            e2etestlib_1.Matcher.toEqual,
            () => ({
                privateKey: key,
                privateKeyHex: privateKeyHex
            })
        ]
    ];
    (0, e2etestlib_1.createTests)(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiY2NoYWluX25vbW9jay50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vZTJlX3Rlc3RzL2NjaGFpbl9ub21vY2sudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLDZDQUFpRTtBQUVqRSxrREFBc0I7QUFJdEIsUUFBUSxDQUFDLFFBQVEsRUFBRSxHQUFTLEVBQUU7SUFDNUIsTUFBTSxTQUFTLEdBQWMsSUFBQSx5QkFBWSxHQUFFLENBQUE7SUFDM0MsTUFBTSxNQUFNLEdBQVcsU0FBUyxDQUFDLE1BQU0sRUFBRSxDQUFBO0lBQ3pDLE1BQU0sUUFBUSxHQUFnQixTQUFTLENBQUMsUUFBUSxFQUFFLENBQUE7SUFFbEQsSUFBSSxZQUFZLEdBQUcsRUFBRSxLQUFLLEVBQUUsRUFBRSxFQUFFLENBQUE7SUFFaEMsTUFBTSxJQUFJLEdBQVcsdUJBQXVCLENBQUE7SUFDNUMsTUFBTSxNQUFNLEdBQVcscUJBQXFCLENBQUE7SUFDNUMsTUFBTSxHQUFHLEdBQ1AsOERBQThELENBQUE7SUFDaEUsTUFBTSxhQUFhLEdBQ2pCLG9FQUFvRSxDQUFBO0lBQ3RFLE1BQU0sU0FBUyxHQUFXLDRDQUE0QyxDQUFBO0lBQ3RFLE1BQU0sVUFBVSxHQUFXLGdEQUFnRCxDQUFBO0lBRTNFLGdJQUFnSTtJQUNoSSxNQUFNLFVBQVUsR0FBUTtRQUN0QjtZQUNFLFlBQVk7WUFDWixHQUFHLEVBQUUsQ0FBQyxRQUFRLENBQUMsVUFBVSxDQUFDLElBQUksRUFBRSxNQUFNLENBQUM7WUFDdkMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLElBQUk7WUFDWixHQUFHLEVBQUUsQ0FBQyxJQUFJO1NBQ1g7UUFDRDtZQUNFLFdBQVc7WUFDWCxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsR0FBRyxDQUFDO1lBQ3pDLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxJQUFJO1lBQ1osR0FBRyxFQUFFLENBQUMsU0FBUztTQUNoQjtRQUNEO1lBQ0UsWUFBWTtZQUNaLEdBQUcsRUFBRSxDQUFDLE1BQU0sQ0FBQyxVQUFVLENBQUMsSUFBSSxFQUFFLE1BQU0sRUFBRSxVQUFVLEVBQUUsSUFBSSxlQUFFLENBQUMsRUFBRSxDQUFDLENBQUM7WUFDN0QsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLEdBQUc7WUFDWCxHQUFHLEVBQUUsQ0FBQyxZQUFZO1NBQ25CO1FBQ0Q7WUFDRSxZQUFZO1lBQ1osR0FBRyxFQUFFLENBQUMsTUFBTSxDQUFDLFVBQVUsRUFBRTtZQUN6QixDQUFDLENBQUMsRUFBRSxFQUFFLENBQUMsQ0FBQztZQUNSLG9CQUFPLENBQUMsSUFBSTtZQUNaLEdBQUcsRUFBRSxDQUFDLGNBQWM7U0FDckI7UUFDRDtZQUNFLHlCQUF5QjtZQUN6QixHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsdUJBQXVCLEVBQUU7WUFDdEMsQ0FBQyxDQUFDLEVBQUUsRUFBRSxDQUFDLENBQUM7WUFDUixvQkFBTyxDQUFDLElBQUk7WUFDWixHQUFHLEVBQUUsQ0FBQyxLQUFLO1NBQ1o7UUFDRDtZQUNFLFdBQVc7WUFDWCxHQUFHLEVBQUUsQ0FBQyxNQUFNLENBQUMsU0FBUyxDQUFDLElBQUksRUFBRSxNQUFNLEVBQUUsU0FBUyxDQUFDO1lBQy9DLENBQUMsQ0FBQyxFQUFFLEVBQUUsQ0FBQyxDQUFDO1lBQ1Isb0JBQU8sQ0FBQyxPQUFPO1lBQ2YsR0FBRyxFQUFFLENBQUMsQ0FBQztnQkFDTCxVQUFVLEVBQUUsR0FBRztnQkFDZixhQUFhLEVBQUUsYUFBYTthQUM3QixDQUFDO1NBQ0g7S0FDRixDQUFBO0lBRUQsSUFBQSx3QkFBVyxFQUFDLFVBQVUsQ0FBQyxDQUFBO0FBQ3pCLENBQUMsQ0FBQyxDQUFBIiwic291cmNlc0NvbnRlbnQiOlsiaW1wb3J0IHsgZ2V0QXZhbGFuY2hlLCBjcmVhdGVUZXN0cywgTWF0Y2hlciB9IGZyb20gXCIuL2UyZXRlc3RsaWJcIlxuaW1wb3J0IHsgS2V5c3RvcmVBUEkgfSBmcm9tIFwic3JjL2FwaXMva2V5c3RvcmUvYXBpXCJcbmltcG9ydCBCTiBmcm9tIFwiYm4uanNcIlxuaW1wb3J0IEF2YWxhbmNoZSBmcm9tIFwic3JjXCJcbmltcG9ydCB7IEVWTUFQSSB9IGZyb20gXCJzcmMvYXBpcy9ldm1cIlxuXG5kZXNjcmliZShcIkNDaGFpblwiLCAoKTogdm9pZCA9PiB7XG4gIGNvbnN0IGF2YWxhbmNoZTogQXZhbGFuY2hlID0gZ2V0QXZhbGFuY2hlKClcbiAgY29uc3QgY2NoYWluOiBFVk1BUEkgPSBhdmFsYW5jaGUuQ0NoYWluKClcbiAgY29uc3Qga2V5c3RvcmU6IEtleXN0b3JlQVBJID0gYXZhbGFuY2hlLk5vZGVLZXlzKClcblxuICBsZXQgZXhwb3J0VHhIYXNoID0geyB2YWx1ZTogXCJcIiB9XG5cbiAgY29uc3QgdXNlcjogc3RyaW5nID0gXCJhdmFsYW5jaGVKc0NDaGFpblVzZXJcIlxuICBjb25zdCBwYXNzd2Q6IHN0cmluZyA9IFwiYXZhbGFuY2hlSnNQQHNzdzRyZFwiXG4gIGNvbnN0IGtleTogc3RyaW5nID1cbiAgICBcIlByaXZhdGVLZXktZXdvcWpQN1B4WTR5cjNpTFRwTGlzcmlxdDk0aGR5REZOZ2NoU3hHR3p0VXJUWHROTlwiXG4gIGNvbnN0IHByaXZhdGVLZXlIZXg6IHN0cmluZyA9XG4gICAgXCIweDU2Mjg5ZTk5Yzk0YjY5MTJiZmMxMmFkYzA5M2M5YjUxMTI0ZjBkYzU0YWM3YTc2NmIyYmM1Y2NmNTU4ZDgwMjdcIlxuICBjb25zdCB3aGFsZUFkZHI6IHN0cmluZyA9IFwiMHg4ZGI5N0M3Y0VjRTI0OWMyYjk4YkRDMDIyNkNjNEMyQTU3QkY1MkZDXCJcbiAgY29uc3QgeENoYWluQWRkcjogc3RyaW5nID0gXCJYLWxvY2FsMThqbWE4cHB3M25oeDVyNGFwOGNsYXp6MGRwczdydjV1MDB6OTZ1XCJcblxuICAvLyB0ZXN0X25hbWUgICAgICAgIHJlc3BvbnNlX3Byb21pc2UgICAgICAgICAgICAgICAgICAgICAgICAgICAgcmVzcF9mbiAgICAgICAgICBtYXRjaGVyICAgICAgICAgICBleHBlY3RlZF92YWx1ZS9vYnRhaW5lZF92YWx1ZVxuICBjb25zdCB0ZXN0c19zcGVjOiBhbnkgPSBbXG4gICAgW1xuICAgICAgXCJjcmVhdGVVc2VyXCIsXG4gICAgICAoKSA9PiBrZXlzdG9yZS5jcmVhdGVVc2VyKHVzZXIsIHBhc3N3ZCksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9CZSxcbiAgICAgICgpID0+IHRydWVcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiaW1wb3J0S2V5XCIsXG4gICAgICAoKSA9PiBjY2hhaW4uaW1wb3J0S2V5KHVzZXIsIHBhc3N3ZCwga2V5KSxcbiAgICAgICh4KSA9PiB4LFxuICAgICAgTWF0Y2hlci50b0JlLFxuICAgICAgKCkgPT4gd2hhbGVBZGRyXG4gICAgXSxcbiAgICBbXG4gICAgICBcImV4cG9ydEFWQVhcIixcbiAgICAgICgpID0+IGNjaGFpbi5leHBvcnRBVkFYKHVzZXIsIHBhc3N3ZCwgeENoYWluQWRkciwgbmV3IEJOKDEwKSksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIuR2V0LFxuICAgICAgKCkgPT4gZXhwb3J0VHhIYXNoXG4gICAgXSxcbiAgICBbXG4gICAgICBcImdldEJhc2VGZWVcIixcbiAgICAgICgpID0+IGNjaGFpbi5nZXRCYXNlRmVlKCksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9CZSxcbiAgICAgICgpID0+IFwiMHgzNDYzMGI4YTAwXCJcbiAgICBdLFxuICAgIFtcbiAgICAgIFwiZ2V0TWF4UHJpb3JpdHlGZWVQZXJHYXNcIixcbiAgICAgICgpID0+IGNjaGFpbi5nZXRNYXhQcmlvcml0eUZlZVBlckdhcygpLFxuICAgICAgKHgpID0+IHgsXG4gICAgICBNYXRjaGVyLnRvQmUsXG4gICAgICAoKSA9PiBcIjB4MFwiXG4gICAgXSxcbiAgICBbXG4gICAgICBcImV4cG9ydEtleVwiLFxuICAgICAgKCkgPT4gY2NoYWluLmV4cG9ydEtleSh1c2VyLCBwYXNzd2QsIHdoYWxlQWRkciksXG4gICAgICAoeCkgPT4geCxcbiAgICAgIE1hdGNoZXIudG9FcXVhbCxcbiAgICAgICgpID0+ICh7XG4gICAgICAgIHByaXZhdGVLZXk6IGtleSxcbiAgICAgICAgcHJpdmF0ZUtleUhleDogcHJpdmF0ZUtleUhleFxuICAgICAgfSlcbiAgICBdXG4gIF1cblxuICBjcmVhdGVUZXN0cyh0ZXN0c19zcGVjKVxufSkiXX0=