"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const e2etestlib_1 = require("./e2etestlib");
const api_1 = require("src/apis/keystore/api");
const bn_js_1 = __importDefault(require("bn.js"));
describe("PChain", () => {
    let tx = { value: "" };
    let addrB = { value: "" };
    let addrC = { value: "" };
    let createdSubnetID = { value: "" };
    const avalanche = (0, e2etestlib_1.getAvalanche)();
    const pchain = avalanche.PChain();
    const keystore = new api_1.KeystoreAPI(avalanche);
    const now = new Date().getTime();
    const startTime = new Date(now + 800);
    const endTime = new Date(now + 50000);
    const stakeAmount = new bn_js_1.default(200000000000);
    const user = "avalancheJspChainUser";
    const passwd = "avalancheJsP@ssw4rd";
    const badUser = "asdfasdfsa";
    const badPass = "pass";
    const memo = "hello world";
    const whaleAddr = "P-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u";
    const key = "PrivateKey-ewoqjP7PxY4yr3iLTpLisriqt94hdyDFNgchSxGGztUrTXtNN";
    const nodeID = "NodeID-7Xhw2mDxuDS44j42TCB6U5579esbSt3Lg";
    const subnetID = "2bGsYJorY6X7RhjPBFs3kYjiNEHo4zGrD2eeyZbb43T2KKi7fM";
    const xChainAddr = "X-local18jma8ppw3nhx5r4ap8clazz0dps7rv5u00z96u";
    const avalancheBlockChainID = "2VvmkRw4yrz8tPrVnCCbvEK1JxNyujpqhmU6SGonxMpkWBx9UD";
    const rewardUTXOTxID = "2nmH8LithVbdjaXsxVQCQfXtzN9hBbmebrsaEYnLM9T32Uy2Y4";
    // test_name        response_promise                            resp_fn          matcher           expected_value/obtained_value
    const tests_spec = [
        [
            "createUser",
            () => keystore.createUser(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => true
        ],
        [
            "createaddrB",
            () => pchain.createAddress(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => addrB
        ],
        [
            "createaddrC",
            () => pchain.createAddress(user, passwd),
            (x) => x,
            e2etestlib_1.Matcher.Get,
            () => addrC
        ],
        [
            "incorrectUser",
            () => pchain.listAddresses(badUser, passwd),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => `problem retrieving user "${badUser}": incorrect password for user "${badUser}"`
        ],
        [
            "incorrectPass",
            () => pchain.listAddresses(user, badPass),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => `problem retrieving user "${user}": incorrect password for user "${user}"`
        ],
        [
            "getBalance",
            () => pchain.getBalance(whaleAddr),
            (x) => x.balance,
            e2etestlib_1.Matcher.toBe,
            () => "30000000000000000"
        ],
        [
            "getBalance2",
            () => pchain.getBalance(whaleAddr),
            (x) => x.utxoIDs[0].txID,
            e2etestlib_1.Matcher.toBe,
            () => "11111111111111111111111111111111LpoYY"
        ],
        [
            "getBlockchainsC",
            () => pchain.getBlockchains(),
            (x) => x[0].id,
            e2etestlib_1.Matcher.toBe,
            () => "2CA6j5zYzasynPsFeNoqWkmTCt3VScMvXUZHbfDJ8k3oGzAPtU"
        ],
        [
            "getBlockchainsX",
            () => pchain.getBlockchains(),
            (x) => x[1].id,
            e2etestlib_1.Matcher.toBe,
            () => "2eNy1mUFdmaxXNj1eQHUe7Np4gju9sJsEtWQ4MX3ToiNKuADed"
        ],
        [
            "getBlockchainStatus",
            () => pchain.getBlockchainStatus(avalancheBlockChainID),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => "Created"
        ],
        [
            "getCurrentSupply",
            () => pchain.getCurrentSupply(),
            (x) => {
                return x.toString();
            },
            e2etestlib_1.Matcher.toBe,
            () => "361196333750752149"
        ],
        [
            "getHeight",
            () => pchain.getHeight(),
            (x) => x.toString(),
            e2etestlib_1.Matcher.toEqual,
            () => "0"
        ],
        [
            "getMinStake",
            () => pchain.getMinStake(),
            (x) => {
                return x.minDelegatorStake.toString();
            },
            e2etestlib_1.Matcher.toBe,
            () => "5000000"
        ],
        [
            "importKey",
            () => pchain.importKey(user, passwd, key),
            (x) => x,
            e2etestlib_1.Matcher.toBe,
            () => whaleAddr
        ],
        [
            "listAddrs",
            () => pchain.listAddresses(user, passwd),
            (x) => x.sort(),
            e2etestlib_1.Matcher.toEqual,
            () => [whaleAddr, addrB.value, addrC.value].sort()
        ],
        [
            "createSubnet",
            () => pchain.createSubnet(user, passwd, [whaleAddr], 1),
            (x) => {
                return x;
            },
            e2etestlib_1.Matcher.Get,
            () => createdSubnetID
        ],
        [
            "getCurrentValidators",
            () => pchain.getCurrentValidators(),
            (x) => x.validators.length,
            e2etestlib_1.Matcher.toBe,
            () => 5
        ],
        [
            "getRewardUTXOs",
            () => pchain.getRewardUTXOs(rewardUTXOTxID),
            (x) => x.utxos.length,
            e2etestlib_1.Matcher.toBe,
            () => 0
        ],
        [
            "getStakeOutputs",
            () => pchain.getStake([whaleAddr]),
            (x) => x.stakedOutputs.length,
            e2etestlib_1.Matcher.toBe,
            () => 0
        ],
        [
            "getStake",
            () => pchain.getStake([whaleAddr]),
            (x) => x.staked.toString(),
            e2etestlib_1.Matcher.toBe,
            () => "0"
        ],
        [
            "addDelegator",
            () => pchain.addDelegator(user, passwd, nodeID, startTime, endTime, stakeAmount, whaleAddr),
            (x) => {
                return x;
            },
            e2etestlib_1.Matcher.toThrow,
            () => "couldn't unmarshal an argument. Ensure arguments are valid and properly formatted. See documentation for example calls"
        ],
        [
            "addValidator",
            () => pchain.addValidator(user, passwd, nodeID, startTime, endTime, stakeAmount, whaleAddr, new bn_js_1.default(10)),
            (x) => {
                return x;
            },
            e2etestlib_1.Matcher.toThrow,
            () => "couldn't unmarshal an argument. Ensure arguments are valid and properly formatted. See documentation for example calls"
        ],
        [
            "exportKey",
            () => pchain.exportKey(user, passwd, addrB.value),
            (x) => x,
            e2etestlib_1.Matcher.toMatch,
            () => /PrivateKey-\w*/
        ],
        // [
        //   "exportAVAX",
        //   () => pchain.exportAVAX(user, passwd, new BN(10), xChainAddr),
        //   (x) => x,
        //   Matcher.toThrow,
        //   () =>
        //     "failed semanticVerifySpend: failed to read consumed UTXO 11111111111111111111111111111111LpoYY:0 due to: not found"
        // ],
        [
            "getTx",
            () => pchain.getTx(tx.value),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => "couldn't unmarshal an argument. Ensure arguments are valid and properly formatted. See documentation for example calls"
        ],
        [
            "getTxStatus",
            () => pchain.getTxStatus("2JxmsgSJxMrddRUsKCxAagdvax3s6kY9xiivyzHRMqFfuRjFi2"),
            (x) => x,
            e2etestlib_1.Matcher.toEqual,
            () => ({ status: "Unknown" })
        ],
        [
            "importAVAX",
            () => pchain.importAVAX(user, passwd, addrB.value, "X"),
            (x) => x,
            e2etestlib_1.Matcher.toThrow,
            () => "no spendable funds were found"
        ]
    ];
    (0, e2etestlib_1.createTests)(tests_spec);
});
//# sourceMappingURL=data:application/json;base64,