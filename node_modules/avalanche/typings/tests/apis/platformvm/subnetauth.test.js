"use strict";
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const buffer_1 = require("buffer/");
const platformvm_1 = require("src/apis/platformvm");
const bintools_1 = __importDefault(require("src/utils/bintools"));
/**
 * @ignore
 */
const bintools = bintools_1.default.getInstance();
describe("SubnetAuth", () => {
    const address1 = buffer_1.Buffer.alloc(4);
    const address2 = buffer_1.Buffer.alloc(4);
    address2.writeUIntBE(0x01, 0, 4);
    const addresses = [address1, address2];
    const subnetAuth1 = new platformvm_1.SubnetAuth(addresses);
    const subnetAuth2 = new platformvm_1.SubnetAuth();
    test("getters", () => {
        const typeName = subnetAuth1.getTypeName();
        expect(typeName).toBe("SubnetAuth");
        const typeID = subnetAuth1.getTypeID();
        expect(typeID).toBe(10);
        const numAddressIndices = subnetAuth1.getNumAddressIndices();
        expect(numAddressIndices).toBe(2);
        const addressIndices = subnetAuth1.getAddressIndices();
        expect(buffer_1.Buffer.isBuffer(addressIndices[0])).toBeTruthy();
        expect(bintools.fromBufferToBN(addressIndices[0]).toNumber()).toBe(0);
        expect(bintools.fromBufferToBN(addressIndices[1]).toNumber()).toBe(1);
    });
    test("toBuffer", () => {
        const subnetAuth1Buf = subnetAuth1.toBuffer();
        subnetAuth2.fromBuffer(subnetAuth1Buf);
        const subnetAuth1Hex = subnetAuth1.toBuffer().toString("hex");
        const subnetAuth2Hex = subnetAuth2.toBuffer().toString("hex");
        expect(subnetAuth1Hex).toBe(subnetAuth2Hex);
    });
});
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3VibmV0YXV0aC50ZXN0LmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiLi4vLi4vLi4vLi4vdGVzdHMvYXBpcy9wbGF0Zm9ybXZtL3N1Ym5ldGF1dGgudGVzdC50cyJdLCJuYW1lcyI6W10sIm1hcHBpbmdzIjoiOzs7OztBQUFBLG9DQUFnQztBQUNoQyxvREFBZ0Q7QUFDaEQsa0VBQXlDO0FBRXpDOztHQUVHO0FBQ0gsTUFBTSxRQUFRLEdBQWEsa0JBQVEsQ0FBQyxXQUFXLEVBQUUsQ0FBQTtBQUVqRCxRQUFRLENBQUMsWUFBWSxFQUFFLEdBQVMsRUFBRTtJQUNoQyxNQUFNLFFBQVEsR0FBVyxlQUFNLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3hDLE1BQU0sUUFBUSxHQUFXLGVBQU0sQ0FBQyxLQUFLLENBQUMsQ0FBQyxDQUFDLENBQUE7SUFDeEMsUUFBUSxDQUFDLFdBQVcsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxFQUFFLENBQUMsQ0FBQyxDQUFBO0lBQ2hDLE1BQU0sU0FBUyxHQUFhLENBQUMsUUFBUSxFQUFFLFFBQVEsQ0FBQyxDQUFBO0lBQ2hELE1BQU0sV0FBVyxHQUFlLElBQUksdUJBQVUsQ0FBQyxTQUFTLENBQUMsQ0FBQTtJQUN6RCxNQUFNLFdBQVcsR0FBZSxJQUFJLHVCQUFVLEVBQUUsQ0FBQTtJQUVoRCxJQUFJLENBQUMsU0FBUyxFQUFFLEdBQVMsRUFBRTtRQUN6QixNQUFNLFFBQVEsR0FBVyxXQUFXLENBQUMsV0FBVyxFQUFFLENBQUE7UUFDbEQsTUFBTSxDQUFDLFFBQVEsQ0FBQyxDQUFDLElBQUksQ0FBQyxZQUFZLENBQUMsQ0FBQTtRQUVuQyxNQUFNLE1BQU0sR0FBVyxXQUFXLENBQUMsU0FBUyxFQUFFLENBQUE7UUFDOUMsTUFBTSxDQUFDLE1BQU0sQ0FBQyxDQUFDLElBQUksQ0FBQyxFQUFFLENBQUMsQ0FBQTtRQUV2QixNQUFNLGlCQUFpQixHQUFXLFdBQVcsQ0FBQyxvQkFBb0IsRUFBRSxDQUFBO1FBQ3BFLE1BQU0sQ0FBQyxpQkFBaUIsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQTtRQUVqQyxNQUFNLGNBQWMsR0FBYSxXQUFXLENBQUMsaUJBQWlCLEVBQUUsQ0FBQTtRQUNoRSxNQUFNLENBQUMsZUFBTSxDQUFDLFFBQVEsQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFVBQVUsRUFBRSxDQUFBO1FBQ3ZELE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO1FBQ3JFLE1BQU0sQ0FBQyxRQUFRLENBQUMsY0FBYyxDQUFDLGNBQWMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDLFFBQVEsRUFBRSxDQUFDLENBQUMsSUFBSSxDQUFDLENBQUMsQ0FBQyxDQUFBO0lBQ3ZFLENBQUMsQ0FBQyxDQUFBO0lBRUYsSUFBSSxDQUFDLFVBQVUsRUFBRSxHQUFTLEVBQUU7UUFDMUIsTUFBTSxjQUFjLEdBQVcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFBO1FBQ3JELFdBQVcsQ0FBQyxVQUFVLENBQUMsY0FBYyxDQUFDLENBQUE7UUFDdEMsTUFBTSxjQUFjLEdBQVcsV0FBVyxDQUFDLFFBQVEsRUFBRSxDQUFDLFFBQVEsQ0FBQyxLQUFLLENBQUMsQ0FBQTtRQUNyRSxNQUFNLGNBQWMsR0FBVyxXQUFXLENBQUMsUUFBUSxFQUFFLENBQUMsUUFBUSxDQUFDLEtBQUssQ0FBQyxDQUFBO1FBQ3JFLE1BQU0sQ0FBQyxjQUFjLENBQUMsQ0FBQyxJQUFJLENBQUMsY0FBYyxDQUFDLENBQUE7SUFDN0MsQ0FBQyxDQUFDLENBQUE7QUFDSixDQUFDLENBQUMsQ0FBQSIsInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IEJ1ZmZlciB9IGZyb20gXCJidWZmZXIvXCJcbmltcG9ydCB7IFN1Ym5ldEF1dGggfSBmcm9tIFwic3JjL2FwaXMvcGxhdGZvcm12bVwiXG5pbXBvcnQgQmluVG9vbHMgZnJvbSBcInNyYy91dGlscy9iaW50b29sc1wiXG5cbi8qKlxuICogQGlnbm9yZVxuICovXG5jb25zdCBiaW50b29sczogQmluVG9vbHMgPSBCaW5Ub29scy5nZXRJbnN0YW5jZSgpXG5cbmRlc2NyaWJlKFwiU3VibmV0QXV0aFwiLCAoKTogdm9pZCA9PiB7XG4gIGNvbnN0IGFkZHJlc3MxOiBCdWZmZXIgPSBCdWZmZXIuYWxsb2MoNClcbiAgY29uc3QgYWRkcmVzczI6IEJ1ZmZlciA9IEJ1ZmZlci5hbGxvYyg0KVxuICBhZGRyZXNzMi53cml0ZVVJbnRCRSgweDAxLCAwLCA0KVxuICBjb25zdCBhZGRyZXNzZXM6IEJ1ZmZlcltdID0gW2FkZHJlc3MxLCBhZGRyZXNzMl1cbiAgY29uc3Qgc3VibmV0QXV0aDE6IFN1Ym5ldEF1dGggPSBuZXcgU3VibmV0QXV0aChhZGRyZXNzZXMpXG4gIGNvbnN0IHN1Ym5ldEF1dGgyOiBTdWJuZXRBdXRoID0gbmV3IFN1Ym5ldEF1dGgoKVxuXG4gIHRlc3QoXCJnZXR0ZXJzXCIsICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCB0eXBlTmFtZTogc3RyaW5nID0gc3VibmV0QXV0aDEuZ2V0VHlwZU5hbWUoKVxuICAgIGV4cGVjdCh0eXBlTmFtZSkudG9CZShcIlN1Ym5ldEF1dGhcIilcblxuICAgIGNvbnN0IHR5cGVJRDogbnVtYmVyID0gc3VibmV0QXV0aDEuZ2V0VHlwZUlEKClcbiAgICBleHBlY3QodHlwZUlEKS50b0JlKDEwKVxuXG4gICAgY29uc3QgbnVtQWRkcmVzc0luZGljZXM6IG51bWJlciA9IHN1Ym5ldEF1dGgxLmdldE51bUFkZHJlc3NJbmRpY2VzKClcbiAgICBleHBlY3QobnVtQWRkcmVzc0luZGljZXMpLnRvQmUoMilcblxuICAgIGNvbnN0IGFkZHJlc3NJbmRpY2VzOiBCdWZmZXJbXSA9IHN1Ym5ldEF1dGgxLmdldEFkZHJlc3NJbmRpY2VzKClcbiAgICBleHBlY3QoQnVmZmVyLmlzQnVmZmVyKGFkZHJlc3NJbmRpY2VzWzBdKSkudG9CZVRydXRoeSgpXG4gICAgZXhwZWN0KGJpbnRvb2xzLmZyb21CdWZmZXJUb0JOKGFkZHJlc3NJbmRpY2VzWzBdKS50b051bWJlcigpKS50b0JlKDApXG4gICAgZXhwZWN0KGJpbnRvb2xzLmZyb21CdWZmZXJUb0JOKGFkZHJlc3NJbmRpY2VzWzFdKS50b051bWJlcigpKS50b0JlKDEpXG4gIH0pXG5cbiAgdGVzdChcInRvQnVmZmVyXCIsICgpOiB2b2lkID0+IHtcbiAgICBjb25zdCBzdWJuZXRBdXRoMUJ1ZjogQnVmZmVyID0gc3VibmV0QXV0aDEudG9CdWZmZXIoKVxuICAgIHN1Ym5ldEF1dGgyLmZyb21CdWZmZXIoc3VibmV0QXV0aDFCdWYpXG4gICAgY29uc3Qgc3VibmV0QXV0aDFIZXg6IHN0cmluZyA9IHN1Ym5ldEF1dGgxLnRvQnVmZmVyKCkudG9TdHJpbmcoXCJoZXhcIilcbiAgICBjb25zdCBzdWJuZXRBdXRoMkhleDogc3RyaW5nID0gc3VibmV0QXV0aDIudG9CdWZmZXIoKS50b1N0cmluZyhcImhleFwiKVxuICAgIGV4cGVjdChzdWJuZXRBdXRoMUhleCkudG9CZShzdWJuZXRBdXRoMkhleClcbiAgfSlcbn0pXG4iXX0=