"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
Object.defineProperty(exports, "__esModule", { value: true });
const jest_mock_axios_1 = __importDefault(require("jest-mock-axios"));
const utxos_1 = require("../../../src/apis/platformvm/utxos");
const keychain_1 = require("../../../src/apis/platformvm/keychain");
const inputs_1 = require("../../../src/apis/platformvm/inputs");
const create_hash_1 = __importDefault(require("create-hash"));
const bintools_1 = __importDefault(require("../../../src/utils/bintools"));
const bn_js_1 = __importDefault(require("bn.js"));
const buffer_1 = require("buffer/");
const outputs_1 = require("../../../src/apis/platformvm/outputs");
const constants_1 = require("../../../src/apis/platformvm/constants");
const index_1 = require("../../../src/index");
const platformvm_1 = require("src/apis/platformvm");
const platformvm_2 = require("src/apis/platformvm");
const utils_1 = require("src/utils");
describe("CreateChainTx", () => {
    /**
     * @ignore
     */
    const bintools = bintools_1.default.getInstance();
    const alias = "X";
    const amnt = utils_1.ONEAVAX.toNumber();
    const assetID = bintools.cb58Decode("2fombhL7aGPwj3KH4bfrmJwW6PVnMobf9Y2fn9GwxiAAJyFDbe");
    let amount;
    let addresses;
    let locktime;
    let threshold;
    const ip = "127.0.0.1";
    const port = 8080;
    const protocol = "http";
    const networkID = 1337;
    const avalanche = new index_1.Avalanche(ip, port, protocol, networkID);
    const pchain = avalanche.PChain();
    const pChainBlockchainID = "11111111111111111111111111111111LpoYY";
    const genesisDataStr = "11111DdZMhYXUZiFV9FNpfpTSQroysjHyMuT5zapYkPYrmap7t7S3sDNNwFzngxR9x1XmoRj5JK1XomX8RHvXYY5h3qYeEsMQRF8Ypia7p1CFHDo6KGSjMdiQkrmpvL8AvoezSxVWKXt2ubmBCnSkpPjnQbBSF7gNg4sPu1PXdh1eKgthaSFREqqG5FKMrWNiS6U87kxCmbKjkmBvwnAd6TpNx75YEiS9YKMyHaBZjkRDNf6Nj1";
    const subnetIDStr = "LtYUqdbbLzTmHMXPPVhAHMeDr6riEmt2pjtfEiqAqAce9MxCg";
    const memoStr = "from snowflake to avalanche";
    const blockchainID = utils_1.Defaults.network[avalanche.getNetworkID()].P["blockchainID"];
    const memo = buffer_1.Buffer.from(memoStr, "utf8");
    const subnetID = bintools.cb58Decode(subnetIDStr);
    const chainNameStr = "EPIC AVM";
    const vmIDStr = "avm";
    const fxIDsStr = ["nftfx", "propertyfx", "secp256k1fx"];
    const gd = new index_1.GenesisData();
    gd.fromBuffer(bintools.cb58Decode(genesisDataStr));
    const addressIndex = buffer_1.Buffer.alloc(4);
    addressIndex.writeUIntBE(0x0, 0, 4);
    const subnetAuth = new platformvm_1.SubnetAuth([addressIndex]);
    let keymgr1 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
    let keymgr2 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
    let keymgr3 = new keychain_1.KeyChain(avalanche.getHRP(), alias);
    let addrs1 = [];
    let addrs2 = [];
    let addrs3 = [];
    let utxos = [];
    let set = new platformvm_2.UTXOSet();
    let inputs = [];
    let outputs = [];
    for (let i = 0; i < 3; i++) {
        addrs1.push(keymgr1.makeKey().getAddress());
        addrs2.push(keymgr2.makeKey().getAddress());
        addrs3.push(keymgr3.makeKey().getAddress());
    }
    amount = new bn_js_1.default(amnt);
    addresses = keymgr1.getAddresses();
    locktime = new bn_js_1.default(54321);
    threshold = 3;
    for (let i = 0; i < 5; i++) {
        const bn = new bn_js_1.default(i);
        let length = 32;
        let txid = buffer_1.Buffer.from((0, create_hash_1.default)("sha256").update(bintools.fromBNToBuffer(bn, length)).digest());
        length = 4;
        let txidx = buffer_1.Buffer.from(bintools.fromBNToBuffer(bn, length));
        const out = new outputs_1.SECPTransferOutput(amount, addresses, locktime, threshold);
        const xferout = new outputs_1.TransferableOutput(assetID, out);
        outputs.push(xferout);
        const u = new utxos_1.UTXO(constants_1.PlatformVMConstants.LATESTCODEC, txid, txidx, assetID, out);
        utxos.push(u);
        txid = u.getTxID();
        txidx = u.getOutputIdx();
        const input = new inputs_1.SECPTransferInput(amount);
        const xferin = new inputs_1.TransferableInput(txid, txidx, assetID, input);
        inputs.push(xferin);
    }
    set.addArray(utxos);
    const createChainTx = new platformvm_1.CreateChainTx(networkID, bintools.cb58Decode(pChainBlockchainID), outputs, inputs, memo, subnetID, chainNameStr, vmIDStr, fxIDsStr, gd, subnetAuth);
    test("buildCreateChainTx", () => __awaiter(void 0, void 0, void 0, function* () {
        const addrs1Strs = addrs1.map((a) => bintools.addressToString("local", "P", a));
        const result = pchain.buildCreateChainTx(set, addrs1Strs, addrs1Strs, subnetID, chainNameStr, vmIDStr, fxIDsStr, gd, subnetAuth, memo);
        const payload = {
            result: {
                assetID: "2fombhL7aGPwj3KH4bfrmJwW6PVnMobf9Y2fn9GwxiAAJyFDbe"
            }
        };
        const responseObj = {
            data: payload
        };
        jest_mock_axios_1.default.mockResponse(responseObj);
        const txu1 = yield result;
        const txu2 = set.buildCreateChainTx(networkID, bintools.cb58Decode(blockchainID), addrs1, addrs1, subnetID, chainNameStr, vmIDStr, fxIDsStr, gd, subnetAuth, pchain.getCreateChainTxFee(), assetID, memo);
        expect(txu2.toBuffer().toString("hex")).toBe(txu1.toBuffer().toString("hex"));
        expect(txu2.toString()).toBe(txu1.toString());
        const tx = txu1.getTransaction();
        const txType = tx.getTxType();
        expect(txType).toBe(constants_1.PlatformVMConstants.CREATECHAINTX);
        const sa = tx.getSubnetAuth();
        expect(sa).toBe(subnetAuth);
        const sID = tx.getSubnetID();
        expect(sID).toBe(subnetIDStr);
        const vID = tx.getVMID();
        expect(vID.toString()).toMatch(vmIDStr);
        const cName = tx.getChainName();
        expect(cName).toBe(chainNameStr);
        const fIDs = tx.getFXIDs();
        expect(fIDs.length).toBe(3);
        fIDs.forEach((fxID, index) => {
            expect(fxID.toString()).toMatch(fxIDsStr[index]);
        });
        const gData = tx.getGenesisData();
        expect(gData).toBe(genesisDataStr);
    }));
    test("createChainTx getChainName", () => {
        const chainName = createChainTx.getChainName();
        expect(chainName).toBe(chainNameStr);
    });
    test("createChainTx getTxType", () => {
        const txType = createChainTx.getTxType();
        expect(txType).toBe(constants_1.PlatformVMConstants.CREATECHAINTX);
    });
    test("createChainTx getSubnetAuth", () => {
        const sa = createChainTx.getSubnetAuth();
        expect(sa).toBe(subnetAuth);
    });
    test("createChainTx getSubnetID", () => {
        const subnetID = createChainTx.getSubnetID();
        expect(subnetID).toBe(subnetIDStr);
    });
    test("createChainTx getVMID", () => {
        const vmID = createChainTx.getVMID();
        expect(vmID.toString()).toMatch(vmIDStr);
    });
    test("createChainTx getChainName", () => {
        const chainName = createChainTx.getChainName();
        expect(chainName).toBe(chainNameStr);
    });
    test("createChainTx getFXIDs", () => {
        const fxIDs = createChainTx.getFXIDs();
        expect(fxIDs.length).toBe(3);
        fxIDs.forEach((fxID, index) => {
            expect(fxID.toString()).toMatch(fxIDsStr[index]);
        });
    });
    test("createChainTx getGenesisData", () => {
        const genesisData = createChainTx.getGenesisData();
        expect(genesisData).toBe(genesisDataStr);
    });
    test("createChainTx fromBuffer", () => {
        const createChainTxBuf = createChainTx.toBuffer();
        const createChainTx2 = new platformvm_1.CreateChainTx();
        createChainTx2.fromBuffer(createChainTxBuf);
        expect(createChainTxBuf.toString("hex")).toMatch(createChainTx2.toBuffer().toString("hex"));
    });
});
//# sourceMappingURL=data:application/json;base64,